<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yoshisaur on Yoshisaurのブログ</title>
    <link>https://yoshisaur.net/</link>
    <description>Recent content in Yoshisaur on Yoshisaurのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 03 Sep 2020 23:00:00 +0000</lastBuildDate><atom:link href="https://yoshisaur.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gitの基本</title>
      <link>https://yoshisaur.net/memorandum/git/</link>
      <pubDate>Sat, 22 May 2021 00:30:48 +0900</pubDate>
      
      <guid>https://yoshisaur.net/memorandum/git/</guid>
      <description>なぜこれを書いているか 僕はGitあまり深くやっていないので、勉強用にこの記事を書いてます
この記事の対象者  git add, git commit, git pushくらいしかやったことない人 ただぼんやりとしかGitしたことない人 mergeってなんぞや&amp;hellip;って人   注意 この記事の内容は「Githubありき」という感じです
Linus Torvaldsさんごめんなさい
登場するgitコマンド 基本的に引数は省力します
  コマンド 操作     git init ディレクトリをGitで使う宣言   git add ファイル、フォルダをステージングエリアに置く   git status ステージングエリアにあるファイル、フォルダの確認   git diff --cashed ステージングエリアにあるファイルの前のバージョンとの変更点を表示   git commit ステージングエリアにあるファイル、フォルダをリポジトリに移動させてバージョンを確定する   git commit -m エディタを開かずにコミットメッセージを引数として書き、git commitを実行   git commit –amend 直前のコミットを修正する   git log コミットの履歴を表示   git log --oneline コミットのログを1行だけのコンパクトな形で表示する   git log -p commitしたときの前のバージョンとの差分(変更点)を表示する   git log --stat コミットごとに変更されたファイル名を列挙して表示する   git remote ローカルのリポジトリをリモートリポジトリに登録する   git config -l リモートリポジトリの場所を確認する   git push ローカルリポジトリのコミットをリモートリポジトリに反映させる   git reset 指定されたコミットのバージョンへ戻す   git reset --hard HEAD 直前のコミットへ戻る   git reset --hard HEAD^ 前々回のコミットへ戻る   git reset --hard ORIG_HEAD git resetによってキャンセルされたコミットへ戻る   git branch ブランチの一覧の表示   git branch &amp;lt;branch name&amp;gt; &amp;lt;branch name&amp;gt;という名前のbranchを作る   git branch -d 指定されたブランチを消す   git checkout 指定されたのブランチへ移動   git checkout -b 新しいブランチを作って移動する   git merge 現在のブランチへ指定されたブランチにあるファイル、フォルダを反映する    まずはGitで登場する領域から ここでステージングエリアを含む、4つの重要な領域について勉強しましょう</description>
    </item>
    
    <item>
      <title>Twitterのbotを作る&#43;nohupコマンドでdaemon「っぽく」させる</title>
      <link>https://yoshisaur.net/study/twitterbot/</link>
      <pubDate>Mon, 10 May 2021 00:08:35 +0900</pubDate>
      
      <guid>https://yoshisaur.net/study/twitterbot/</guid>
      <description>Twitterのbotを作りたい B1の頃から、Twitterのbotやりたいなぁ&amp;hellip;。って思ってて、最近ちょっと暇だったので作ってみました。
未来、賢くなったら、「馬鹿だなぁ自分」って感じでこの記事を振り返りたい。未来、後輩から多少尊敬されるようになったら、後輩達にこの記事を書いた馬鹿な先輩の足跡を見て多少安心してもらえると嬉しいどす。
そもそもTwitterbotなんか作って何を学びたいの? 結果から言うと全部逃げの選択を取ってしまって、なんか動くけど&amp;hellip;うん、君もっと頑張ろうよ&amp;hellip;。ってなる感じのプロダクトになりました。特にセキュリティ関連の脅威がなくても、まあ動くなら正義じゃん?ってな感じで始めるしかない。とりあえず作る過程で何を学びたいか列挙する。
 API  Applicationが別のProgram(ing)を使うためのInterface(仲介役)みたいな いや、こんな説明だとOSの授業で先生に怒られるのは必至 API key(API使えるようになるための暗号)ってのが必要になるらしい   Daemon  デェ↑モンって読みます。紀元前98038年に爆誕した(おい) メインメモリ上で常駐(ずっと稼働してる)プログラムのこと バッググラウンドプロセスの一種     まあ、つまりTwitterのAPIの機能(ツイートをゲットしたり、ツイートを送信したり)を使うプログラムを、daemon化して、常駐化、つまりずっと稼働している状態にしたいっていう野望がありました。
では早速API keyをゲットしよう Twitter APIを使う準備をしましょう。
必要なもの
 携帯番号、メールアドレスと連携しているTwitterアカウント サーバ(学科VMとか)   ウェブ上でAPI keyを申請する API keyをゲットするために色々申請しなければなりません、作業は1時間もかからないと思います。
このサイトに飛んでください  ↑ 僕は趣味でbotを作るのでHobbyistを選びました
↑ 作るのはbotなのでMaking a botを選択
↑ 適当に情報を埋めていく
↑ 英語で「TwitterのAPIやデータをどのように使うつもりなのか」を英語で記述して説明する。コピペはダメかも。
↑ ここも多少英語で書き書き
↑ 情報の確認的な
↑ ポリシー的なのを読んでチェック、なんかあったら自己責任でお願いします
↑ Twitterアカウントと連携しているメールアドレスへ確認メールが送られる
↑ メールの受信ボックスへ行って、確認メールを見る。Confirm your emailをクリック
↑ ここのサイト  から上のようなページを探す、そしてCreate Projectをクリック
↑ 適当にプロジェクト名を記入</description>
    </item>
    
    <item>
      <title>OS自作入門0日目</title>
      <link>https://yoshisaur.net/study_os/day0/</link>
      <pubDate>Sun, 25 Apr 2021 00:17:57 +0900</pubDate>
      
      <guid>https://yoshisaur.net/study_os/day0/</guid>
      <description>MacでOSを自作する 「30日でできる! OS自作入門  」という本を使って自作OSの勉強をしようかと思います。本来この本はWindows環境向けなのですが、macOS用の環境を作ってしかも公開してくれている方がいるので、その方のレポジトリ  を使ってこの本を読むにあたっての環境を構築したいと思います。
自分のMacBookの環境 $sw_vers ProductName:	macOS ProductVersion:	11.2.2 BuildVersion:	20D80  手順に従って環境を構築します レポジトリのクローン
git clone https://github.com/tatsumack/30nichideosjisaku qemu  のinstall
brew install qemu qemuのバージョン確認
$qemu-system-i386 -version QEMU emulator version 5.2.0 Copyright (c) 2003-2020 Fabrice Bellard and the QEMU Project developers $ cd 30nichideosjisaku/01_day/helloos0/ $ make run 動作確認
$cd 30nichideosjisaku/01_day/helloos0/ $make run このようなWindowが出れば動作確認成功です</description>
    </item>
    
    <item>
      <title>Vimのノーマルモードのコマンド</title>
      <link>https://yoshisaur.net/memorandum/vim_normal_mode/</link>
      <pubDate>Sat, 17 Apr 2021 21:38:25 +0900</pubDate>
      
      <guid>https://yoshisaur.net/memorandum/vim_normal_mode/</guid>
      <description>どんな人がこの記事を読むべきか この記事の対象は以下の条件に当てはまる人です。
 インサートモードで文字を入力することぐらいしかVimを活用できていない :q, :qwくらいしかコマンドを知らない Vimがなぜ人気なのかわからない人   または、
 備忘録的なのが欲しい方 ちょくちょくノーマルモードのコマンドを忘れてしまう方   という感じです。
Vimの良さを知ろう Vimの素晴らしさはなんと言っても、「起動が速いこと」と「モード」が便利すぎることです。
どれくらい速いか vim --startuptime time.txt これをコマンドで実行してみてください。
vimが開きます。何も書かれていませんが、:qで抜けて
less time.txt 上記のコマンドを実行すると
vimの起動までにかかる時間(msec)が記述されているはずです。
私の場合は20.219msecで、秒にすると0.020219secでした。
数あるテキストエディタの起動時間では、これはかなり速い方です。
モードとは何か 初めてVimに触れたとき、Vimが開かれた直後に文字を入力しようとしても「何も入力されない!」ってなったことありませんか?
これは単に、モードがインサートモードになっていないからなんですよね。
一般的なIDEに慣れ親しんでいる人は不便に感じるかもしれませんが、このモードって概念がとても優れているんですよ。
Vimのモードを大まかに羅列すると「ノーマルモード」、「コマンドラインモード」、「インサートモード」、「ビジュアルモード」、「ターミナルモード」に分類することができます。
  モード 目的     ノーマルモード カーソル移動, モード変更, コマンド   コマンドモード コマンド   インサートモード 文字の入力   ビジュアルモード 文字の選択   ターミナルモード ターミナル操作    ノーマルモード ノーマルモードのコマンドについて Vimはコマンドを駆使することでテキストの編集をすばやく行うことができます。よって、沢山のコマンドやそれらの組み合わせを勉強することで、Vimの作業効率を図ることができます。</description>
    </item>
    
    <item>
      <title>自己紹介/PR</title>
      <link>https://yoshisaur.net/diary/my_pr/</link>
      <pubDate>Sat, 10 Apr 2021 16:15:17 +0900</pubDate>
      
      <guid>https://yoshisaur.net/diary/my_pr/</guid>
      <description>テーブルで自己紹介   Key Value     氏名 佐野巧曜 (Sano Yoshiaki)   高校 カナダ, ブリテッシュコロンビア州のマウントダグラス高校   大学 / 学部 / コース / 学年 琉球大学 / 工学部 / 知能情報コース / B2   読み書き話す聞くなどができる自然言語 日本語（ネイティブスピーカー), 英語(非ネイティブ)   GTEC LISTENING 191, READING 174 -&amp;gt; 交渉, プレゼンテーション, マネジメントなどの, ほぼどのような場面でも自信を持って英語を業務に使えるプロフェッショナルレベル相当   日常的に使うプログラミング言語 Python   触ったことがあるプログラミング言語 Ruby, C++, Java, Swift   枕頭の書 戦略的データサイエンス入門   今何してる 琉球大学の知能情報コースのネットワークやサーバ等を学生主体で運営保守する「システム管理チーム」で見習いをしています   苦手なこと/勉強したいこと インフラ周り, ネットワーク, セキュリティ, gitが全部初心者です   長所 「運がとにかくいい」, 「数は少ないが友人関係に恵まれている」, 「手を動かしてする勉強が好き」, 「性格が良い」   短所 「図々しい」, 「馴れ馴れしい」, 「座学が苦手」, 「性格が悪い」    製作物 ブログ B1の頃は, 琉大 Advent Calendar 2020  で「ニューラルネットワークの仕組みと実装の解説  」と「お金を稼ぐための機械学習  」という記事を書きました</description>
    </item>
    
    <item>
      <title>お金を稼ぐための機械学習</title>
      <link>https://yoshisaur.net/study_machine_learning/data_science_for_money_making/</link>
      <pubDate>Thu, 24 Dec 2020 08:00:00 +0000</pubDate>
      
      <guid>https://yoshisaur.net/study_machine_learning/data_science_for_money_making/</guid>
      <description>はじめに この記事ではお金を稼ぐための機械学習を学びます。株やFXなどの金融工学への応用は範囲外です。おもにビジネスに応用が効く技術のみ紹介しようと思います。この記事を書く際にあたってビジネスとかの話をしますが私はお金が好きなだけで意識は全く高くないです。
そもそも、株やFXへの応用は難しいことを理解しよう 値動きの予測の不可能性を説くランダムウォーク理論、相場を変動させうる情報は瞬時にマーケットに広がってしまい利益を生むことができる隙がないとする効率的市場仮説など、機械学習の応用を阻む壁が多すぎます。まず、値動きが予測できるアルゴリズムが作れたらその優れた頭脳を別のことに使ったほうが有意義だと思います。そもそも、お金稼ぎのために投資を勉強しようとしている人は情弱か頭が残念な方です。レバレッジ1倍でS&amp;amp;P 500を毎月買い続けるかプログラミングか宅建の勉強してください。
ビジネスへの応用 ゼロサムゲームの株やFXとは違い、ビジネスまたはマーケティングにおいては、ベンダーとクライアントが双方得する方向を目指せることもあるのでそちらのほうに機械学習の応用を考えるほうが良いと考えられます。まずはDDD(データ主導による意思決定)、それから広告への応用、利益曲線、そして最後にKPIと呼ばれる指標へのデータサイエンスの応用について話をしようと思います。よろしくおねがいします。
DDD(データ主導による意思決定) データ主導による意思決定は、個人の直感や経験に偏らない、データ分析に基づく意思決定のことを言います。そしてそれをDDDと呼び、DDDが企業のパフォーマンスを向上させるということがある研究によってすでにわかっています。[Brynjolfsson, E., Hitt, L. M., &amp;amp; Kim, H. 2011]この研究ではDDDを客観的に測る評価尺度が開発されていて、同研究で、この評価の標準偏差が1上昇するごとに生産性が4%~6%上昇するということがわかっています。
広告への応用 ご家庭の赤ちゃんの出生情報は比較的簡単に手に入るらしいです。幼児商品関連の企業はそれを使って最近赤ちゃんを出産した家庭に乳幼児に関する商品を宣伝するらしいです。とてもいい戦略ですね。しかし、この戦略は他の企業も取っているので、赤ちゃんが生まれた瞬間同時に他の企業と競争を強いられることになり優位性が生まれません。ここで、家庭の購入履歴から分析してその家庭に妊婦がいるかどうかを判別するモデルを作成して、そのモデルの判断をもとに広告を出す企業が一社あらわれました。結果はどうなるでしょうか。その一社のみがいち早く家庭に広告を出せて競争に勝つことができました、めでたしめでたし。
これは実話らしいです。データサイエンス及び機械学習はとてもおそろしいですね。このようにデータサイエンスで広告を最適化できたら素晴らしいことが起きます。
K-means法と決定木(CARTアルゴリズム) まずはK-means法の説明をします。
「この画像にいる人々を2グループに分割しろ。」と命令されたらどのように分類しますか？大抵は「男」と「女」に分割すると思います。
では「この人々を3グループに分割しろ。」と命令された場合はどう分割しますか？おそらく、「白人」、「黒人」、「黄色人種」という風にわけるのではないでしょうか。
機械学習の分野において、これらの例のようにグループを分割して割り振る処理をクラスタリング と呼び、先ほどのクラスタリングを行う代表的なアルゴリズムがK-means法です。
K-means法の実装や仕組みは詳しく説明しませんが、人が何も教えなくてもいろいろなグループに分類分けしてくれているという感じで捉えてもらってかまいません。ちなみにK-means法の「K」はKの個のグループに分けるという意味です。K=2でしたら2グループに分けるという意味です。ちなみに最適なKを定める手法もあります。[Shi, C., Wei, B., Wei, S., Wang, W., Liu, H., &amp;amp; Liu, J. 2020]
続いて、決定木(CARTアルゴリズム)の説明をします。
決定木(CARTアルゴリズム)はこの図のように「身長が180cmより高いか」、「体重は80kgより重いか」という風にYes, Noで答えられる条件を設定して分類します。
機械学習の分野において、どのグループに属するかを判断する問題を分類問題といい。決定木は分類問題を解いてくれます。実は決定木のアルゴリズムの他にサポートベクターマシン, ニューラルネットワーク, ect.ありますが、なぜ決定木(CARTアルゴリズム)をこの記事で説明しているかといいますと、説明可能性が高いからです。機械学習の手法はほとんどが説明可能性に乏しい中、決定木(CARTアルゴリズム)は説明可能性に優れていて、先ほどのK-means法と併用することで面白い効果を期待できます。
顧客データを利用し、顧客をK個にグループ分けして、決定木でなぜその分類になったか分析することで、広告に載せるモデルの参考にすることができます。たとえばグループJillをK-means法で発見して、決定木で分析した結果、グループJillには子供にサッカーを習わせる教育熱心なアッパーミドル階級の母親が多いとわかったとします。「特定の顧客に似たモデルがいる広告が適切な宣伝になる」と仮定した場合、ここでの最も適切な宣伝方法は「サッカーユニフォームを着た息子と楽しそうに買い物をしている女性」を映す広告を出すこととなります。
利益曲線 ハガキや封書などを直接自宅や会社に送付しサービス・製品やキャンペーンの案内をするための施策をダイレクトメール(DM)といいますが、言わずもがなコストがかかります。
例えば一人あたりDMを送るのに5ドルかかるとして、もしDMで紹介されている商品を購入したらDMを送る費用を差し引いて8ドル利益が出るとします。33.3&amp;hellip;%の人が商品を買い、残りの66.66&amp;hellip;%の人が商品を購入しない場合、期待値は0.33&amp;hellip;×8 + 0.66&amp;hellip;×(-6) = -0.66&amp;hellip;となり一人にDMを送るごとに0.66ドルかかってしまうという計算になります。
上の図の赤の折れ線グラフは100人を無作為に選んでDMを送った場合の利益曲線です。
利益は0ドルを下回り、赤字となります。この場合、DMを送るという施策は失敗すると想定していいでしょうか。 実はまだその判断は早いんです。
DMの商品を買ってくれる人を1、買わない人を0として判別するモデルを作ります。そしてそのモデルは顧客のデータを入力したとき、0~1の間の連続値を算出して1に近ければ(0.5以上)、商品を買う人だと予測し、0に近ければ(0.5未満)、買わない人だと予測します。さきほどの100人を分析して算出値が1に近い順に並び替えてDMをその順で送るシュミレーションをします。この場合の利益曲線が青の折れ線グラフです。順番を並び替える理由は最初のほうに実際に買ってくれる人が集まるからです。そうして青の折れ線グラフの頂点に位置する人までDMを送り終えたら、これ以上DMを送るのを止めるという施策をとります。この場合の利益は200ドル弱となり、100人を調べてDMを送ると、200ドルの価値があるということを示唆しています。こうして判別モデルと利益曲線を併用することで単純な確率論では取れない施策も、利益を産むようにすることができます。
続編を検討中 備忘録のためだけにこの記事を書きましたが、資料を作る作業はなかなか面白かったです。また続編を書こうかと思います。いつの日かまた。</description>
    </item>
    
    <item>
      <title>ニューラルネットワークの仕組みの解説と実装</title>
      <link>https://yoshisaur.net/study_machine_learning/how_to_make_neural_network/</link>
      <pubDate>Sun, 29 Nov 2020 08:00:00 +0000</pubDate>
      
      <guid>https://yoshisaur.net/study_machine_learning/how_to_make_neural_network/</guid>
      <description>はじめに この記事ではニューラルネットワークの仕組みを説明して実装したコードを掲載しております。琉球大学の知能情報コースprogramming1で習う知識で実装しています。並列処理をするようには設計していません。 理解度を深めるために問題を各所に掲載しております。回答は最後の方へスクロールダウンすると見つけることができます。
この記事を読むべき人  ニューラルネットワークの仕組みがわからないままTensorflowやPytorchなどの機械学習APIを使いたくない人 線形代数が苦手だけどニューラルネットワークに興味ある人(極力、図を使って説明しています)   脳のニューロンの仕組み 実際に脳に存在するニューロンの図 脳のニューロンはそのニューロンに集まる信号を一つづつ重み付け(信号を大きくしたり小さくしたりする)してその和が閾値(境目となる値)を超えると他のニューロンに信号を発火して、超えないと他のニューロンに信号を発火しない仕組みになっている。
脳のニューロンの仕組み 脳のニューロンの振る舞いを形式的に表現すると以下のような図になる。
形式ニューロン 重みと閾値 重みと閾値の計算 ニューロンに送られてくる信号をxとしてそれに対応する重みのベクトルをw(重み=weightのw)、閾値をb(閾値=biasのb)、重み付けされた信号の和から閾値を引いた値をuとすると
となる。下の表と再度表示する形式ニューロンの対応を確認されたし。
問題(1_1, 1_2) 1_1. 送られる信号をx = {x1,x2,x3,x4}、重みをw = {{w1},{w2},{w3},{w4}}、閾値をb 、重み付けされた信号の和から閾値を引いた値をuとすると、u = xw-b = x1w1+x2w2+x3w3+x4w4 - b と表すことができるが、 x = {1,-1,2,-2}, w = {{1},{2},{-1},{-2}}, b = 2とするとuはいくらか。
1_2.
この図の各々の信号（青）と重み（黄色）を参考にuを求めよ、なお赤色の玉の中の数字の-(-3)は閾値が-3で、重み付けされた信号の和から-3を引くという意味とする。
コラム: ニューラルネットワークの学習 ニューラルネットワークは機械学習の一分野であり機械学習は読んで字の如く「機械に学習させること」である。ではニューラルネットワーク、つまりニューロンの網形体はどのように学習をするかというと「重みと閾値」を修正することで学習をする。ちなみに重みを修正するアルゴリズムをオプティマイザーというが閾値も全く同じアルゴリズムを採用する。ちなみに信号を重み付けして和を求めることを数学的な専門用語で線形結合と呼ぶ。
活性化関数 重みと閾値から、重み付けされた信号の和から閾値を引いた値を求める方法を学んだ。ここでは脳のニューロンの発火に相当する活性化関数を学ぶ。
脳の発火の仕組みを数理的に表現する。重み付けされた信号の和から閾値を引いた値をuとするとuが0以上(=信号の和が閾値より大きい)であれば1(信号を発火する)を返す、0未満(=信号の和が閾値より小さい)であるなら0(信号を発火しない)を返すということになる。uを引数として下記のような定義をする関数のことを活性化関数という。ちなみにこの活性化関数はステップ関数と呼ばれる。
ステップ関数 発火の結果をzとし、z = f(u)としてz(活性化関数の戻り値)の定義を数式で表現すると、
となる。 ステップ関数を横軸u、縦軸zでグラフで表現すると
こうなる。
問題(2_1, 2_2) 2_1. uを1_1の答えとし, f(u)をステップ関数という活性化関数で定義し、z = f(u)で発火を表現するとzは1と0どちらか。
2_2. uを1_2の答えとし, f(u)をステップ関数という活性化関数で定義し、z = f(u)で発火を表現するとzは1と0どちらか。</description>
    </item>
    
  </channel>
</rss>
